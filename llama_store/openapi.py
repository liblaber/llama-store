"""
Helpers for the OpenAPI spec generated by FastAPI.
"""
# pylint: disable=line-too-long
from fastapi import FastAPI
from data.user_crud import MAXIMUM_USERS

OPENAPI_INTRO_DESCRIPTION = """The llama store API! Get details on all your favorite llamas.

## To use this API

- You will need to register a user, once done you can request an API token.
- You can then use your API token to get details about the llamas.
"""

OPENAPI_USER_DESCRIPTION = (
    """
## User registration

To register a user, send a POST request to `/user` with the following body:
    
```json
{
    "email": "<your email>",
    "password": "<your password>"
}
```
"""
    + f"This API has a maximum of {MAXIMUM_USERS} current users. Once this is exceeded, older users will be deleted. If your user is deleted, you will need to register again."
    + """
## Get an API token

To get an API token, send a POST request to `/token` with the following body:
    
```json
{
    "email": "<your email>",
    "password": "<your password>"
}
```

This will return a token that you can use to authenticate with the API:

```json
{
  "access_token": "<your new token>",
  "token_type": "bearer"
}
```

## Use the API token

To use the API token, add it to the `Authorization` header of your request:

```
Authorization: Bearer <your token>
```

"""
)

OPENAPI_LLAMA_DESCRIPTION = """
"""

OPENAPI_DESCRIPTION = OPENAPI_INTRO_DESCRIPTION + OPENAPI_USER_DESCRIPTION + OPENAPI_LLAMA_DESCRIPTION


def fix_openapi_spec(app: FastAPI) -> None:
    """
    The default OpenAPI spec created by FastAPI has trailing slashes on the server URLs. This function removes them, as this
    is a validation error in the spectral analysis of the OpenAPI spec.
    See this discussion from the FastAPIO GitHub repo: https://github.com/tiangolo/fastapi/discussions/10309

    This also adds bearer auth to the security schemes and the top level security section
    """
    # Get the existing schema
    existing_schema = app.openapi()

    # Remove the trailing slash from the server URL
    for server in existing_schema["servers"]:
        server["url"] = server["url"].rstrip("/")

    # Set the new schema
    app.openapi_schema = existing_schema

    # Define a function to return the new schema - the function on the app is replaced with this one
    def get_openapi_schema():
        """
        Return the new schema.
        """
        return existing_schema

    # Replace the function on the app to return the new schema
    app.openapi = get_openapi_schema
